{"name":"Dmitry Bosikov Portfolio","tagline":"Software Engineer","body":"###Gameplay\r\nThe game is based on game tic tac toe with new challenge. The challenge is to win as many rounds in a row as you can. In order to support such challenge, the game has artificial intelligence (AI) that learns to play. That gives effect of growing difficulty. The goal of a player is to analyse and create a strategy of the game to slow down learning of AI. It is simple to get 20-30 wins but all fun starts when your goal is to get 100, 200 wins when each move can be final.\r\n\r\n###Mobile\r\nThis game is live and available on Firefox marketplace. For installing it you need to have Firefox browser, then to open link: [https://marketplace.firefox.com/app/xo-with-ai/](https://marketplace.firefox.com/app/xo-with-ai/) and follow prompts to install the game on your device.\r\n\r\n###Tools\r\nBefore creating and development this game, it was created the library MYASO for managing complicated, time consuming and error critical operations. The library and sample application are available for download. It includes artificial intelligence and graphics engine. A programmer can create new classes for objects, groups of objects and cameras with the library. Those classes are passed as parameters in WebGL management class that interacts with WebGL and refreshes scene. The library has class for artificial intelligence that accepts game status data, makes decision on the next move and learns from changes in game state.\r\n\r\n###Artificial Intelligence\r\nAI in the game works as hybrid of neural networks and Simulated Annealing algorithms. Execution consists of three steps. The 1st action sees game state and check it's memory if there are any good moves for the situation.If it has moves, it uses one with the best value that comes from learning. If there are none, it tries randomly to make a move. The 2nd action is learning that calculates fitness (how good move is) of AI move and move of a player. Then to subtract own value from a player and save a result value to the memory. The 3rd action is forgetting - after some period of time it starts moving values of moves to 0 and records with value 0 get removed. Particular for this game, forgetting is not a problem until you start moving from one dimension to multi-dimensional where space becomes a concern.\r\n\r\n###Graphics\r\nGraphical part of the game starts from creating models in an app. After finishing, models save as JSON. Next files read using model class with group class and pass it to the game engine for rendering. The engine saves objects in its array and uses them for refreshing game scene. When game starts, the engine has only board in its array and displays it. After players and AI start make moves, new elements \"X\" and \"O\" are adding to array for rendering. At the end of the game, the buffer gets cleared.\r\n\r\n###Web front end and UI\r\nUser interface consists of \"div\" elements that act like a window. Navigation between windows was done with active elements that make visible loading a window, perform all necessary operations for requested window and make it visible after preparation. In the game interaction happens through invisible active components that give imitation of interactions with 3D world. Game data are stored on a device with \"localStorage\" class. The body of the page configures with CSS to act like an application.\r\n\r\n###Contact\r\nEmail: dmitry.bosikov.4@gmail.com    \r\nLinkedIn: [Dmitry Bosikov](https://www.linkedin.com/in/dbosikov)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}